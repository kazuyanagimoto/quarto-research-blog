{
  "hash": "ad52253c1b6a7f2790886db4aa0e179c",
  "result": {
    "engine": "knitr",
    "markdown": "# Model {#sec-model}\n\n\n\n\n\n\n\n\n\n\n\n@aiyagari1994 introduced a model of the economy with heterogenous agents and incomplete markets. The model is a discrete-time, infinite-horizon model with stochastic labor productivity.\n\n## Model Setup\n\nThe model is a discrete-time, infinite-horizon model with stochastic labor productivity. The economy consists of a continuum of agents with different levels of capital and labor productivity. Each agent chooses how much capital to accumulate in order to maximize their lifetime utility.\n\nThe utility function is given by:\n\n$$\nu(c) = \\frac{c^{1-\\gamma} - 1}{1-\\gamma}.\n$$\n\nThe production function is defined as a Cobb-Douglas function:\n\n$$\nF(K, L) = K^\\alpha L^{1-\\alpha}.\n$$\n\nThe log labor productivity $l_t$ follows an AR(1) process:\n\n$$\nl_t = \\rho l_{t-1} + \\epsilon_t, \\quad \\epsilon_t \\sim N(0, \\sigma^2).\n$$\n\nABBREVIATED\n\n\n## Calibration\n\nStandard values in the literature are used for the calibration. @tbl-parameters shows the parameters used in the model.\n\n\n\n\n\n::: {#tbl-parameters .cell layout-align=\"center\" tbl-cap='Model Parameters'}\n::: {.cell-output-display}\n\n```{=html}\n<!-- preamble start -->\n\n    <!-- tinytable mathjax start -->\n    <script id=\"MathJax-script\" async src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"></script>\n    <script>\n    MathJax = {\n      tex: {\n        inlineMath: [['$', '$'], ['\\\\(', '\\\\)']]\n      },\n      svg: {\n        fontCache: 'global'\n      }\n    };\n    </script>\n    <!-- tinytable mathjax end -->\n\n    <script>\n\n      function styleCell_kljwjgkxswegkmv790a2(i, j, css_id) {\n          var table = document.getElementById(\"tinytable_kljwjgkxswegkmv790a2\");\n          var cell = table.rows[i]?.cells[j];  // Safe navigation to avoid errors\n          if (cell) {\n              console.log(`Styling cell at (${i}, ${j}) with class ${css_id}`);\n              cell.classList.add(css_id);\n          } else {\n              console.warn(`Cell at (${i}, ${j}) not found.`);\n          }\n      }\n      function insertSpanRow(i, colspan, content) {\n        var table = document.getElementById('tinytable_kljwjgkxswegkmv790a2');\n        var newRow = table.insertRow(i);\n        var newCell = newRow.insertCell(0);\n        newCell.setAttribute(\"colspan\", colspan);\n        // newCell.innerText = content;\n        // this may be unsafe, but innerText does not interpret <br>\n        newCell.innerHTML = content;\n      }\n      function spanCell_kljwjgkxswegkmv790a2(i, j, rowspan, colspan) {\n        var table = document.getElementById(\"tinytable_kljwjgkxswegkmv790a2\");\n        const targetRow = table.rows[i];\n        const targetCell = targetRow.cells[j];\n        for (let r = 0; r < rowspan; r++) {\n          // Only start deleting cells to the right for the first row (r == 0)\n          if (r === 0) {\n            // Delete cells to the right of the target cell in the first row\n            for (let c = colspan - 1; c > 0; c--) {\n              if (table.rows[i + r].cells[j + c]) {\n                table.rows[i + r].deleteCell(j + c);\n              }\n            }\n          }\n          // For rows below the first, delete starting from the target column\n          if (r > 0) {\n            for (let c = colspan - 1; c >= 0; c--) {\n              if (table.rows[i + r] && table.rows[i + r].cells[j]) {\n                table.rows[i + r].deleteCell(j);\n              }\n            }\n          }\n        }\n        // Set rowspan and colspan of the target cell\n        targetCell.rowSpan = rowspan;\n        targetCell.colSpan = colspan;\n      }\n      // tinytable span after\n      window.addEventListener('load', function () {\n          var cellsToStyle = [\n            // tinytable style arrays after\n          { positions: [ { i: 7, j: 0 }, { i: 7, j: 1 }, { i: 7, j: 2 },  ], css_id: 'tinytable_css_295bgbsz8ke36j2yakbb',}, \n          { positions: [ { i: 0, j: 0 }, { i: 0, j: 1 }, { i: 0, j: 2 },  ], css_id: 'tinytable_css_yeaferekagn15qm57cua',}, \n          ];\n\n          // Loop over the arrays to style the cells\n          cellsToStyle.forEach(function (group) {\n              group.positions.forEach(function (cell) {\n                  styleCell_kljwjgkxswegkmv790a2(cell.i, cell.j, group.css_id);\n              });\n          });\n      });\n    </script>\n\n    <style>\n      /* tinytable css entries after */\n      .table td.tinytable_css_295bgbsz8ke36j2yakbb, .table th.tinytable_css_295bgbsz8ke36j2yakbb { border-bottom: solid #d3d8dc 0.1em; }\n      .table td.tinytable_css_yeaferekagn15qm57cua, .table th.tinytable_css_yeaferekagn15qm57cua { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; }\n    </style>\n    <div class=\"container\">\n      <table class=\"table table-borderless\" id=\"tinytable_kljwjgkxswegkmv790a2\" style=\"width: auto; margin-left: auto; margin-right: auto;\" data-quarto-disable-processing='true'>\n        <thead>\n        \n              <tr>\n                <th scope=\"col\">Parameter</th>\n                <th scope=\"col\">Value</th>\n                <th scope=\"col\">Description</th>\n              </tr>\n        </thead>\n        \n        <tbody>\n                <tr>\n                  <td>$\\gamma$</td>\n                  <td>3.00</td>\n                  <td>Coefficient of relative risk aversion</td>\n                </tr>\n                <tr>\n                  <td>$\\beta$</td>\n                  <td>0.96</td>\n                  <td>Discount factor</td>\n                </tr>\n                <tr>\n                  <td>$\\delta$</td>\n                  <td>0.08</td>\n                  <td>Depreciation rate</td>\n                </tr>\n                <tr>\n                  <td>$\\alpha$</td>\n                  <td>0.36</td>\n                  <td>Capital share in output</td>\n                </tr>\n                <tr>\n                  <td>$b$</td>\n                  <td>3.00</td>\n                  <td>Upper bound of debt</td>\n                </tr>\n                <tr>\n                  <td>$\\rho$</td>\n                  <td>0.60</td>\n                  <td>Persistence of labor productivity</td>\n                </tr>\n                <tr>\n                  <td>$\\sigma$</td>\n                  <td>0.40</td>\n                  <td>Standard deviation of labor productivity shock</td>\n                </tr>\n        </tbody>\n      </table>\n    </div>\n<!-- hack to avoid NA insertion in last line -->\n```\n\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}